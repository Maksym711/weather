{"ast":null,"code":"// import { uniqueBy } from './filterRepeat' \nimport { API_KEY, BASE_URL } from './constants';\n\n// const getCurrentWeather = (lat, lon, setWeatherData, setLoading, setError) => {\n//     fetch(`https://api.weatherbit.io/v2.0/current?lat=${lat}&lon=${lon}&key=c2d3c64087e54d018cae06444bf6a848`)\n//     .then(data => data.json())\n//     .then(data => setWeatherData(data.data))\n//     .catch(() => {\n//         setLoading(false)\n//         setError(true)\n//     })\n//     .finally(() => setLoading(false))\n// }\n// const getCurrentWeather = (lat, lon) => {\n//     return new Promise((resolve, reject) => {\n//       fetch(`https://api.weatherbit.io/v2.0/current?lat=${lat}&lon=${lon}&key=c2d3c64087e54d018cae06444bf6a848`)\n//         .then(data => resolve(data.json()))\n//         .catch(err => reject(err))\n//     })\n//   }\n\n//   const fetchData = (url) => {   // в хелпер \n//     return new Promise((resolve, reject) => {\n//       fetch(url)\n//         .then(data => resolve(data.json()))\n//         .catch(err => reject(err))\n//     })\n//   }\n\nconst getCurrentWeatherUrl = (lat, lon) => {\n  return `${BASE_URL}/current?lat=${lat}&lon=${lon}&key=${API_KEY}`;\n};\nconst getCurrentWeatherHourlyUrl = (lat, lon) => {\n  return `${BASE_URL}/forecast/hourly?lat=${lat}&lon=${lon}&key=${API_KEY}`;\n};\nconst getCurrentWeatherDailyUrl = (lat, lon) => {\n  return `${BASE_URL}/forecast/daily?lat=${lat}&lon=${lon}&key=${API_KEY}`;\n};\n\n// const getCurrentWeatherHourly = (lat, lon, setWeatherHourly, setLoading, setError) => {\n//     fetch(`https://api.weatherbit.io/v2.0/forecast/hourly?lat=${lat}&lon=${lon}&key=c2d3c64087e54d018cae06444bf6a848`)\n//         .then(data => data.json())\n//         .then(data => setWeatherHourly(data.data))\n//         .catch(() => {\n//             setLoading(false)\n//             setError(true)\n//         })\n//         .finally(() => setLoading(false))\n// }\n\n// const getCurrentWeatherDaily = (lat, lon, setWeatherSixteenDays, setLoading, setError) => {\n//     fetch(`https://api.weatherbit.io/v2.0/forecast/daily?lat=${lat}&lon=${lon}&key=c2d3c64087e54d018cae06444bf6a848`)\n//         .then(data => data.json())\n//         .then(data => setWeatherSixteenDays(data.data))\n//         .catch(() => {\n//             setLoading(false)\n//             setError(true)\n//         })\n//         .finally(() => setLoading(false))\n// }\n\n// const getCurrentNameCity = (lat, lon, setNameCity, setLoading, setError) => {\n//     fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&accept-language=en`)\n//         .then(data => data.json())\n//         .then(data => {\n//             setNameCity(data.address.city)\n//             setLoading(false)\n//         })\n//         .catch(() => {\n//             setLoading(false)\n//             setError(true)\n//         })\n//         .finally(() => setLoading(false))\n// }\n\n// const getCurrentOptionsCities = (inputValue, setFound, setCityOptions, setCounter) => {\n//     fetch(`http://api.geonames.org/searchJSON?name=${inputValue}&maxRows=100&username=mkskhjwssofwfjjcjw00&&&`)\n//             .then(data => data.json())\n//             .then(data => {\n//                 const filteredCities = data.geonames\n//                     .filter(filt => {\n//                         return filt.fclName === \"city, village,...\" \n//                         && filt.fcodeName !== \"section of populated place\" \n//                         && filt.lat && filt.lng \n//                         && filt.name.toLowerCase().startsWith(inputValue.toLowerCase())\n//                     })\n//                     .sort((a,b)=> b.population - a.population)\n//                 const uniqueFilteredCities = uniqueBy(filteredCities, (o1, o2) => o1.name === o2.name && o1.adminName1 === o2.adminName1 && o1.countryName === o2.countryName)\n//                 uniqueFilteredCities.length === 0 ? setFound(true) : setFound(false)\n//                 if(uniqueFilteredCities.length <= 6){\n//                     setCityOptions(uniqueFilteredCities)\n//                 }\n//                 if(uniqueFilteredCities.length > 6 && uniqueFilteredCities.length < 12){\n//                     setCityOptions(uniqueFilteredCities.slice(0, 6))\n//                 }\n//                 if(uniqueFilteredCities.length > 12 && uniqueFilteredCities.length < 18){\n//                     setCityOptions(uniqueFilteredCities.slice(0, 12))\n//                 }\n//                 if(uniqueFilteredCities.length > 18 && uniqueFilteredCities.length < 24){\n//                     setCityOptions(uniqueFilteredCities.slice(0, 18))\n//                 }\n//                 if(uniqueFilteredCities.length > 24 && uniqueFilteredCities.length < 30){\n//                     setCityOptions(uniqueFilteredCities.slice(0, 24))\n//                 }\n//                 if(uniqueFilteredCities.length > 30){\n//                     setCityOptions(uniqueFilteredCities.slice(0, 30))\n//                 }\n//                 setCounter(-1)\n//             })\n//             .catch(() => alert('error when searching for lists of cities'))\n// }\n\nexport { getCurrentWeatherUrl, getCurrentWeatherHourlyUrl, getCurrentWeatherDailyUrl };","map":{"version":3,"names":["API_KEY","BASE_URL","getCurrentWeatherUrl","lat","lon","getCurrentWeatherHourlyUrl","getCurrentWeatherDailyUrl"],"sources":["C:/Users/Gold/Desktop/weather/src/helper/apiWeather.js"],"sourcesContent":["// import { uniqueBy } from './filterRepeat' \r\nimport {API_KEY, BASE_URL} from './constants'\r\n\r\n// const getCurrentWeather = (lat, lon, setWeatherData, setLoading, setError) => {\r\n//     fetch(`https://api.weatherbit.io/v2.0/current?lat=${lat}&lon=${lon}&key=c2d3c64087e54d018cae06444bf6a848`)\r\n//     .then(data => data.json())\r\n//     .then(data => setWeatherData(data.data))\r\n//     .catch(() => {\r\n//         setLoading(false)\r\n//         setError(true)\r\n//     })\r\n//     .finally(() => setLoading(false))\r\n// }\r\n// const getCurrentWeather = (lat, lon) => {\r\n//     return new Promise((resolve, reject) => {\r\n//       fetch(`https://api.weatherbit.io/v2.0/current?lat=${lat}&lon=${lon}&key=c2d3c64087e54d018cae06444bf6a848`)\r\n//         .then(data => resolve(data.json()))\r\n//         .catch(err => reject(err))\r\n//     })\r\n//   }\r\n\r\n//   const fetchData = (url) => {   // в хелпер \r\n//     return new Promise((resolve, reject) => {\r\n//       fetch(url)\r\n//         .then(data => resolve(data.json()))\r\n//         .catch(err => reject(err))\r\n//     })\r\n//   }\r\n\r\nconst getCurrentWeatherUrl = (lat, lon) => {\r\n    return `${BASE_URL}/current?lat=${lat}&lon=${lon}&key=${API_KEY}`\r\n}\r\n\r\nconst getCurrentWeatherHourlyUrl = (lat, lon) => {\r\n    return `${BASE_URL}/forecast/hourly?lat=${lat}&lon=${lon}&key=${API_KEY}`\r\n}\r\n\r\nconst getCurrentWeatherDailyUrl = (lat, lon) => {\r\n    return `${BASE_URL}/forecast/daily?lat=${lat}&lon=${lon}&key=${API_KEY}`\r\n}\r\n\r\n// const getCurrentWeatherHourly = (lat, lon, setWeatherHourly, setLoading, setError) => {\r\n//     fetch(`https://api.weatherbit.io/v2.0/forecast/hourly?lat=${lat}&lon=${lon}&key=c2d3c64087e54d018cae06444bf6a848`)\r\n//         .then(data => data.json())\r\n//         .then(data => setWeatherHourly(data.data))\r\n//         .catch(() => {\r\n//             setLoading(false)\r\n//             setError(true)\r\n//         })\r\n//         .finally(() => setLoading(false))\r\n// }\r\n\r\n// const getCurrentWeatherDaily = (lat, lon, setWeatherSixteenDays, setLoading, setError) => {\r\n//     fetch(`https://api.weatherbit.io/v2.0/forecast/daily?lat=${lat}&lon=${lon}&key=c2d3c64087e54d018cae06444bf6a848`)\r\n//         .then(data => data.json())\r\n//         .then(data => setWeatherSixteenDays(data.data))\r\n//         .catch(() => {\r\n//             setLoading(false)\r\n//             setError(true)\r\n//         })\r\n//         .finally(() => setLoading(false))\r\n// }\r\n\r\n// const getCurrentNameCity = (lat, lon, setNameCity, setLoading, setError) => {\r\n//     fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&accept-language=en`)\r\n//         .then(data => data.json())\r\n//         .then(data => {\r\n//             setNameCity(data.address.city)\r\n//             setLoading(false)\r\n//         })\r\n//         .catch(() => {\r\n//             setLoading(false)\r\n//             setError(true)\r\n//         })\r\n//         .finally(() => setLoading(false))\r\n// }\r\n\r\n// const getCurrentOptionsCities = (inputValue, setFound, setCityOptions, setCounter) => {\r\n//     fetch(`http://api.geonames.org/searchJSON?name=${inputValue}&maxRows=100&username=mkskhjwssofwfjjcjw00&&&`)\r\n//             .then(data => data.json())\r\n//             .then(data => {\r\n//                 const filteredCities = data.geonames\r\n//                     .filter(filt => {\r\n//                         return filt.fclName === \"city, village,...\" \r\n//                         && filt.fcodeName !== \"section of populated place\" \r\n//                         && filt.lat && filt.lng \r\n//                         && filt.name.toLowerCase().startsWith(inputValue.toLowerCase())\r\n//                     })\r\n//                     .sort((a,b)=> b.population - a.population)\r\n//                 const uniqueFilteredCities = uniqueBy(filteredCities, (o1, o2) => o1.name === o2.name && o1.adminName1 === o2.adminName1 && o1.countryName === o2.countryName)\r\n//                 uniqueFilteredCities.length === 0 ? setFound(true) : setFound(false)\r\n//                 if(uniqueFilteredCities.length <= 6){\r\n//                     setCityOptions(uniqueFilteredCities)\r\n//                 }\r\n//                 if(uniqueFilteredCities.length > 6 && uniqueFilteredCities.length < 12){\r\n//                     setCityOptions(uniqueFilteredCities.slice(0, 6))\r\n//                 }\r\n//                 if(uniqueFilteredCities.length > 12 && uniqueFilteredCities.length < 18){\r\n//                     setCityOptions(uniqueFilteredCities.slice(0, 12))\r\n//                 }\r\n//                 if(uniqueFilteredCities.length > 18 && uniqueFilteredCities.length < 24){\r\n//                     setCityOptions(uniqueFilteredCities.slice(0, 18))\r\n//                 }\r\n//                 if(uniqueFilteredCities.length > 24 && uniqueFilteredCities.length < 30){\r\n//                     setCityOptions(uniqueFilteredCities.slice(0, 24))\r\n//                 }\r\n//                 if(uniqueFilteredCities.length > 30){\r\n//                     setCityOptions(uniqueFilteredCities.slice(0, 30))\r\n//                 }\r\n//                 setCounter(-1)\r\n//             })\r\n//             .catch(() => alert('error when searching for lists of cities'))\r\n// }\r\n\r\nexport {getCurrentWeatherUrl, getCurrentWeatherHourlyUrl, getCurrentWeatherDailyUrl}"],"mappings":"AAAA;AACA,SAAQA,OAAO,EAAEC,QAAQ,QAAO,aAAa;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,oBAAoB,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;EACvC,OAAQ,GAAEH,QAAS,gBAAeE,GAAI,QAAOC,GAAI,QAAOJ,OAAQ,EAAC;AACrE,CAAC;AAED,MAAMK,0BAA0B,GAAGA,CAACF,GAAG,EAAEC,GAAG,KAAK;EAC7C,OAAQ,GAAEH,QAAS,wBAAuBE,GAAI,QAAOC,GAAI,QAAOJ,OAAQ,EAAC;AAC7E,CAAC;AAED,MAAMM,yBAAyB,GAAGA,CAACH,GAAG,EAAEC,GAAG,KAAK;EAC5C,OAAQ,GAAEH,QAAS,uBAAsBE,GAAI,QAAOC,GAAI,QAAOJ,OAAQ,EAAC;AAC5E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQE,oBAAoB,EAAEG,0BAA0B,EAAEC,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
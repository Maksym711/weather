{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gold\\\\Desktop\\\\weather\\\\src\\\\Section\\\\WeatherForecast\\\\WeatherForecast.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport './WeatherForecast.css';\nimport NavigationWeatherForecast from './NavigationWeatherForecast/NavigationWeatherForecast';\nimport ContentWeatherForecast from './ContentWeatherForecast/ContentWeatherForecast';\nimport WeatherContext from '../../helper/weatherContext';\nimport { getCurrentWeatherDailyUrl } from '../../helper/apiWeather';\nimport fetchData from '../../helper/fetchData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WeatherForecast() {\n  _s();\n  const weatherContext = useContext(WeatherContext);\n  const [searchParams] = useSearchParams();\n  useEffect(() => {\n    weatherContext.setLatCity(searchParams.get('lat'));\n    weatherContext.setLonCity(searchParams.get('lon'));\n    if (weatherContext.latCity && weatherContext.lonCity) {\n      weatherContext.setLoading(true);\n      fetchData(getCurrentWeatherDailyUrl(weatherContext.latCity, weatherContext.lonCity)).then(({\n        data\n      }) => weatherContext.setWeatherSixteenDays(data)).catch(() => weatherContext.setError(true)).finally(() => weatherContext.setLoading(false));\n    }\n  }, [weatherContext.latCity, weatherContext.lonCity]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-forecast\",\n    children: [/*#__PURE__*/_jsxDEV(NavigationWeatherForecast, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ContentWeatherForecast, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherForecast, \"4R1msMOGbEeFNUFIW++VlENa3bo=\", false, function () {\n  return [useSearchParams];\n});\n_c = WeatherForecast;\nvar _c;\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"names":["React","useContext","useEffect","useSearchParams","NavigationWeatherForecast","ContentWeatherForecast","WeatherContext","getCurrentWeatherDailyUrl","fetchData","jsxDEV","_jsxDEV","WeatherForecast","_s","weatherContext","searchParams","setLatCity","get","setLonCity","latCity","lonCity","setLoading","then","data","setWeatherSixteenDays","catch","setError","finally","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Gold/Desktop/weather/src/Section/WeatherForecast/WeatherForecast.js"],"sourcesContent":["import React, { useContext, useEffect } from 'react'\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport './WeatherForecast.css'\r\nimport NavigationWeatherForecast from './NavigationWeatherForecast/NavigationWeatherForecast'\r\nimport ContentWeatherForecast from './ContentWeatherForecast/ContentWeatherForecast'\r\nimport WeatherContext from '../../helper/weatherContext'\r\nimport { getCurrentWeatherDailyUrl } from '../../helper/apiWeather'\r\nimport fetchData from '../../helper/fetchData'\r\n\r\nexport default function WeatherForecast() {\r\n\r\n    const weatherContext = useContext(WeatherContext)\r\n    const [searchParams] = useSearchParams()\r\n\r\n    useEffect(() => {\r\n\r\n        weatherContext.setLatCity(searchParams.get('lat'))\r\n        weatherContext.setLonCity(searchParams.get('lon'))\r\n\r\n        if(weatherContext.latCity && weatherContext.lonCity){\r\n            weatherContext.setLoading(true)\r\n            fetchData(getCurrentWeatherDailyUrl(weatherContext.latCity, weatherContext.lonCity))\r\n                .then(({data}) => weatherContext.setWeatherSixteenDays(data))\r\n                .catch(() => weatherContext.setError(true))\r\n                .finally(() => weatherContext.setLoading(false))\r\n        }\r\n    }, [weatherContext.latCity, weatherContext.lonCity])\r\n\r\n    return (\r\n    <div className='weather-forecast'>\r\n        <NavigationWeatherForecast />\r\n        <ContentWeatherForecast />\r\n    </div>\r\n    )\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAO,uBAAuB;AAC9B,OAAOC,yBAAyB,MAAM,uDAAuD;AAC7F,OAAOC,sBAAsB,MAAM,iDAAiD;AACpF,OAAOC,cAAc,MAAM,6BAA6B;AACxD,SAASC,yBAAyB,QAAQ,yBAAyB;AACnE,OAAOC,SAAS,MAAM,wBAAwB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EAEtC,MAAMC,cAAc,GAAGZ,UAAU,CAACK,cAAc,CAAC;EACjD,MAAM,CAACQ,YAAY,CAAC,GAAGX,eAAe,CAAC,CAAC;EAExCD,SAAS,CAAC,MAAM;IAEZW,cAAc,CAACE,UAAU,CAACD,YAAY,CAACE,GAAG,CAAC,KAAK,CAAC,CAAC;IAClDH,cAAc,CAACI,UAAU,CAACH,YAAY,CAACE,GAAG,CAAC,KAAK,CAAC,CAAC;IAElD,IAAGH,cAAc,CAACK,OAAO,IAAIL,cAAc,CAACM,OAAO,EAAC;MAChDN,cAAc,CAACO,UAAU,CAAC,IAAI,CAAC;MAC/BZ,SAAS,CAACD,yBAAyB,CAACM,cAAc,CAACK,OAAO,EAAEL,cAAc,CAACM,OAAO,CAAC,CAAC,CAC/EE,IAAI,CAAC,CAAC;QAACC;MAAI,CAAC,KAAKT,cAAc,CAACU,qBAAqB,CAACD,IAAI,CAAC,CAAC,CAC5DE,KAAK,CAAC,MAAMX,cAAc,CAACY,QAAQ,CAAC,IAAI,CAAC,CAAC,CAC1CC,OAAO,CAAC,MAAMb,cAAc,CAACO,UAAU,CAAC,KAAK,CAAC,CAAC;IACxD;EACJ,CAAC,EAAE,CAACP,cAAc,CAACK,OAAO,EAAEL,cAAc,CAACM,OAAO,CAAC,CAAC;EAEpD,oBACAT,OAAA;IAAKiB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC7BlB,OAAA,CAACN,yBAAyB;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7BtB,OAAA,CAACL,sBAAsB;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV;AAACpB,EAAA,CAzBuBD,eAAe;EAAA,QAGZR,eAAe;AAAA;AAAA8B,EAAA,GAHlBtB,eAAe;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}